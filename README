Jason Xiong: xiongjj
Matt Lee: leeml2

Project Description:
Vim plugin to moniter various system resources used by vim plugins in order
to effectively debug or determine the root of slowdowns, etc.
A main process will handle sending out workers to collect data from the various
processes spawned by the vim plugins, and sending them through a message queue
so that another process can then analyze and output the data, possibly using
some sort of graph utility such as gnuplot

Error Conditions:
when it doesn't work (???)

Milestones:
Multi threaded support for non-blocking actions in vim
Message queue to pass information about CPU,etc utilization to proper
    data analysis processes
An analysis of proc files to gather the proper resource information

Expected Schedule/Timeline
Done by April 21

Language and operating system:
Python/VimL on Unix systems (our machines being Ubuntu 14.04 and OSX Yosemite)

Questions:
How low-level should we be working in? e.g. in the case of a message queue,
would we be implementing the actual message queue system or could we use
things like RabbitMQ or Celery?

IP Mechanisms:

https://docs.python.org/3/library/multiprocessing.html#multiprocessing.Queue
https://docs.python.org/3/library/multiprocessing.html#multiprocessing.Pipe
http://semanchuk.com/philip/posix_ipc/

tangential ideas:
using --startuptime if :profile doesn't pan out
run vim within an instance of python to do realtime processing
use autocmd to intercept commands
analyize profile afterwards
